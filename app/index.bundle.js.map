{"version":3,"sources":["webpack:///app/index.bundle.js","webpack:///./app/index.js","webpack:///../node_modules/svg4everybody/dist/svg4everybody.js"],"names":["webpackJsonp","module","exports","__webpack_require__","_svg4everybody","obj","__esModule","default","init","callTelList","handler","window","onload","console","log","phoneNumbers","callButton","document","body","querySelector","getRandomInt","min","max","Math","floor","random","call","e","preventDefault","length","phoneNumberToCall","open","addEventListener","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","root","factory","svg4everybody","apply","this","embed","parent","svg","target","fragment","createDocumentFragment","viewBox","hasAttribute","getAttribute","setAttribute","clone","cloneNode","childNodes","appendChild","firstChild","loadreadystatechange","xhr","onreadystatechange","readyState","cachedDocument","_cachedDocument","implementation","createHTMLDocument","innerHTML","responseText","_cachedTarget","_embeds","splice","map","item","id","getElementById","rawopts","oninterval","index","uses","use","parentNode","getSVGAncestor","src","opts","attributeName","polyfill","validate","removeChild","srcSplit","split","url","shift","join","requests","XMLHttpRequest","send","push","numberOfSvgUseElementsToBypass","requestAnimationFrame","Object","newerIEUA","webkitUA","olderEdgeUA","edgeUA","inIframe","top","self","test","navigator","userAgent","match","setTimeout","getElementsByTagName","node","nodeName","toLowerCase"],"mappings":"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","file":"app/index.bundle.js","sourcesContent":["webpackJsonp([0],[\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n__webpack_require__(2);\n\n__webpack_require__(3);\n\nvar _svg4everybody = __webpack_require__(4);\n\nvar _svg4everybody2 = _interopRequireDefault(_svg4everybody);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _svg4everybody2.default)();\n\n//* include to make external svg sprite for project\n//*** from svg files in '../assets/images/sprites/to_social/'\t\n//function requireAll(r) { r.keys().forEach(r); }\n//requireAll(require.context('../assets/images/sprites/to_sprite/', true));\nvar init = function init() {\n  callTelList.handler();\n};\n///*------------------------------------------------\n///* -----------run app-----------------------------\n///*------------------------------------------------\nwindow.onload = init;\nconsole.log('It` work %%%!');\n\nvar callTelList = function () {\n  'use strict';\n  // The Phone numbers\n\n  var phoneNumbers = ['+88462312591', '+89093292911'],\n      callButton = document.body.querySelector('#callPhone');\n  /**\r\n  * Returns a random integer between min (inclusive) and max (inclusive)\r\n  * Using Math.round() will give you a non-uniform distribution!\r\n  */\n  var getRandomInt = function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  var call = function call(e) {\n    e.preventDefault();\n    // Get min and max index of the phone number array\n    var min = 0,\n        max = phoneNumbers.length - 1,\n\n    // get the random phone number\n    phoneNumberToCall = phoneNumbers[getRandomInt(min, max)];\n    // Call the random number\n    window.open('tel:' + phoneNumberToCall);\n  };\n  var handler = function handler() {\n    callButton.addEventListener('click', call);\n  };\n  return { handler: handler };\n}();\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function(root, factory) {\n     true ? // AMD. Register as an anonymous module unless amdModuleId is set\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n        return root.svg4everybody = factory();\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : \"object\" == typeof module && module.exports ? // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory() : root.svg4everybody = factory();\n}(this, function() {\n    /*! svg4everybody v2.1.9 | github.com/jonathantneal/svg4everybody */\n    function embed(parent, svg, target) {\n        // if the target exists\n        if (target) {\n            // create a document fragment to hold the contents of the target\n            var fragment = document.createDocumentFragment(), viewBox = !svg.hasAttribute(\"viewBox\") && target.getAttribute(\"viewBox\");\n            // conditionally set the viewBox on the svg\n            viewBox && svg.setAttribute(\"viewBox\", viewBox);\n            // copy the contents of the clone into the fragment\n            for (// clone the target\n            var clone = target.cloneNode(!0); clone.childNodes.length; ) {\n                fragment.appendChild(clone.firstChild);\n            }\n            // append the fragment into the svg\n            parent.appendChild(fragment);\n        }\n    }\n    function loadreadystatechange(xhr) {\n        // listen to changes in the request\n        xhr.onreadystatechange = function() {\n            // if the request is ready\n            if (4 === xhr.readyState) {\n                // get the cached html document\n                var cachedDocument = xhr._cachedDocument;\n                // ensure the cached html document based on the xhr response\n                cachedDocument || (cachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument(\"\"), \n                cachedDocument.body.innerHTML = xhr.responseText, xhr._cachedTarget = {}), // clear the xhr embeds list and embed each item\n                xhr._embeds.splice(0).map(function(item) {\n                    // get the cached target\n                    var target = xhr._cachedTarget[item.id];\n                    // ensure the cached target\n                    target || (target = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id)), \n                    // embed the target into the svg\n                    embed(item.parent, item.svg, target);\n                });\n            }\n        }, // test the ready state change immediately\n        xhr.onreadystatechange();\n    }\n    function svg4everybody(rawopts) {\n        function oninterval() {\n            // while the index exists in the live <use> collection\n            for (// get the cached <use> index\n            var index = 0; index < uses.length; ) {\n                // get the current <use>\n                var use = uses[index], parent = use.parentNode, svg = getSVGAncestor(parent), src = use.getAttribute(\"xlink:href\") || use.getAttribute(\"href\");\n                if (!src && opts.attributeName && (src = use.getAttribute(opts.attributeName)), \n                svg && src) {\n                    if (polyfill) {\n                        if (!opts.validate || opts.validate(src, svg, use)) {\n                            // remove the <use> element\n                            parent.removeChild(use);\n                            // parse the src and get the url and id\n                            var srcSplit = src.split(\"#\"), url = srcSplit.shift(), id = srcSplit.join(\"#\");\n                            // if the link is external\n                            if (url.length) {\n                                // get the cached xhr request\n                                var xhr = requests[url];\n                                // ensure the xhr request exists\n                                xhr || (xhr = requests[url] = new XMLHttpRequest(), xhr.open(\"GET\", url), xhr.send(), \n                                xhr._embeds = []), // add the svg and id as an item to the xhr embeds list\n                                xhr._embeds.push({\n                                    parent: parent,\n                                    svg: svg,\n                                    id: id\n                                }), // prepare the xhr ready state change event\n                                loadreadystatechange(xhr);\n                            } else {\n                                // embed the local id into the svg\n                                embed(parent, svg, document.getElementById(id));\n                            }\n                        } else {\n                            // increase the index when the previous value was not \"valid\"\n                            ++index, ++numberOfSvgUseElementsToBypass;\n                        }\n                    }\n                } else {\n                    // increase the index when the previous value was not \"valid\"\n                    ++index;\n                }\n            }\n            // continue the interval\n            (!uses.length || uses.length - numberOfSvgUseElementsToBypass > 0) && requestAnimationFrame(oninterval, 67);\n        }\n        var polyfill, opts = Object(rawopts), newerIEUA = /\\bTrident\\/[567]\\b|\\bMSIE (?:9|10)\\.0\\b/, webkitUA = /\\bAppleWebKit\\/(\\d+)\\b/, olderEdgeUA = /\\bEdge\\/12\\.(\\d+)\\b/, edgeUA = /\\bEdge\\/.(\\d+)\\b/, inIframe = window.top !== window.self;\n        polyfill = \"polyfill\" in opts ? opts.polyfill : newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537 || edgeUA.test(navigator.userAgent) && inIframe;\n        // create xhr requests object\n        var requests = {}, requestAnimationFrame = window.requestAnimationFrame || setTimeout, uses = document.getElementsByTagName(\"use\"), numberOfSvgUseElementsToBypass = 0;\n        // conditionally start the interval if the polyfill is active\n        polyfill && oninterval();\n    }\n    function getSVGAncestor(node) {\n        for (var svg = node; \"svg\" !== svg.nodeName.toLowerCase() && (svg = svg.parentNode); ) {}\n        return svg;\n    }\n    return svg4everybody;\n});\n\n/***/ })\n],[0]);\n\n\n// WEBPACK FOOTER //\n// app/index.bundle.js","import 'normalize.css';\r\nimport '../assets/styles/index.main.scss';\r\nimport svg4everybody from 'svg4everybody';\r\nsvg4everybody();\r\n\r\n//* include to make external svg sprite for project\r\n//*** from svg files in '../assets/images/sprites/to_social/'\t\r\n//function requireAll(r) { r.keys().forEach(r); }\r\n//requireAll(require.context('../assets/images/sprites/to_sprite/', true));\r\nconst init = () => {\r\n  callTelList.handler();\r\n};\r\n///*------------------------------------------------\r\n///* -----------run app-----------------------------\r\n///*------------------------------------------------\r\nwindow.onload = init;\r\nconsole.log('It` work %%%!');\r\n\r\nconst callTelList = (() => {\r\n  'use strict';\r\n  // The Phone numbers\r\n  const phoneNumbers = [\r\n      '+88462312591',\r\n      '+89093292911',\r\n    ],\r\n    callButton = document.body.querySelector('#callPhone');\r\n  /**\r\n\t * Returns a random integer between min (inclusive) and max (inclusive)\r\n\t * Using Math.round() will give you a non-uniform distribution!\r\n\t*/\r\n  const getRandomInt = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  };\r\n\r\n  const call = (e) => {\r\n    e.preventDefault();\r\n    // Get min and max index of the phone number array\r\n    const min = 0,\r\n      max = phoneNumbers.length - 1,\r\n      // get the random phone number\r\n      phoneNumberToCall = phoneNumbers[getRandomInt(min, max)];\r\n    // Call the random number\r\n    window.open('tel:' + phoneNumberToCall);   \r\n  };\r\n  const handler = () => {\r\n    callButton.addEventListener('click', call);\r\n  };\r\n  return {handler};\r\n})();\n\n\n// WEBPACK FOOTER //\n// ./app/index.js","!function(root, factory) {\n    \"function\" == typeof define && define.amd ? // AMD. Register as an anonymous module unless amdModuleId is set\n    define([], function() {\n        return root.svg4everybody = factory();\n    }) : \"object\" == typeof module && module.exports ? // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory() : root.svg4everybody = factory();\n}(this, function() {\n    /*! svg4everybody v2.1.9 | github.com/jonathantneal/svg4everybody */\n    function embed(parent, svg, target) {\n        // if the target exists\n        if (target) {\n            // create a document fragment to hold the contents of the target\n            var fragment = document.createDocumentFragment(), viewBox = !svg.hasAttribute(\"viewBox\") && target.getAttribute(\"viewBox\");\n            // conditionally set the viewBox on the svg\n            viewBox && svg.setAttribute(\"viewBox\", viewBox);\n            // copy the contents of the clone into the fragment\n            for (// clone the target\n            var clone = target.cloneNode(!0); clone.childNodes.length; ) {\n                fragment.appendChild(clone.firstChild);\n            }\n            // append the fragment into the svg\n            parent.appendChild(fragment);\n        }\n    }\n    function loadreadystatechange(xhr) {\n        // listen to changes in the request\n        xhr.onreadystatechange = function() {\n            // if the request is ready\n            if (4 === xhr.readyState) {\n                // get the cached html document\n                var cachedDocument = xhr._cachedDocument;\n                // ensure the cached html document based on the xhr response\n                cachedDocument || (cachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument(\"\"), \n                cachedDocument.body.innerHTML = xhr.responseText, xhr._cachedTarget = {}), // clear the xhr embeds list and embed each item\n                xhr._embeds.splice(0).map(function(item) {\n                    // get the cached target\n                    var target = xhr._cachedTarget[item.id];\n                    // ensure the cached target\n                    target || (target = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id)), \n                    // embed the target into the svg\n                    embed(item.parent, item.svg, target);\n                });\n            }\n        }, // test the ready state change immediately\n        xhr.onreadystatechange();\n    }\n    function svg4everybody(rawopts) {\n        function oninterval() {\n            // while the index exists in the live <use> collection\n            for (// get the cached <use> index\n            var index = 0; index < uses.length; ) {\n                // get the current <use>\n                var use = uses[index], parent = use.parentNode, svg = getSVGAncestor(parent), src = use.getAttribute(\"xlink:href\") || use.getAttribute(\"href\");\n                if (!src && opts.attributeName && (src = use.getAttribute(opts.attributeName)), \n                svg && src) {\n                    if (polyfill) {\n                        if (!opts.validate || opts.validate(src, svg, use)) {\n                            // remove the <use> element\n                            parent.removeChild(use);\n                            // parse the src and get the url and id\n                            var srcSplit = src.split(\"#\"), url = srcSplit.shift(), id = srcSplit.join(\"#\");\n                            // if the link is external\n                            if (url.length) {\n                                // get the cached xhr request\n                                var xhr = requests[url];\n                                // ensure the xhr request exists\n                                xhr || (xhr = requests[url] = new XMLHttpRequest(), xhr.open(\"GET\", url), xhr.send(), \n                                xhr._embeds = []), // add the svg and id as an item to the xhr embeds list\n                                xhr._embeds.push({\n                                    parent: parent,\n                                    svg: svg,\n                                    id: id\n                                }), // prepare the xhr ready state change event\n                                loadreadystatechange(xhr);\n                            } else {\n                                // embed the local id into the svg\n                                embed(parent, svg, document.getElementById(id));\n                            }\n                        } else {\n                            // increase the index when the previous value was not \"valid\"\n                            ++index, ++numberOfSvgUseElementsToBypass;\n                        }\n                    }\n                } else {\n                    // increase the index when the previous value was not \"valid\"\n                    ++index;\n                }\n            }\n            // continue the interval\n            (!uses.length || uses.length - numberOfSvgUseElementsToBypass > 0) && requestAnimationFrame(oninterval, 67);\n        }\n        var polyfill, opts = Object(rawopts), newerIEUA = /\\bTrident\\/[567]\\b|\\bMSIE (?:9|10)\\.0\\b/, webkitUA = /\\bAppleWebKit\\/(\\d+)\\b/, olderEdgeUA = /\\bEdge\\/12\\.(\\d+)\\b/, edgeUA = /\\bEdge\\/.(\\d+)\\b/, inIframe = window.top !== window.self;\n        polyfill = \"polyfill\" in opts ? opts.polyfill : newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537 || edgeUA.test(navigator.userAgent) && inIframe;\n        // create xhr requests object\n        var requests = {}, requestAnimationFrame = window.requestAnimationFrame || setTimeout, uses = document.getElementsByTagName(\"use\"), numberOfSvgUseElementsToBypass = 0;\n        // conditionally start the interval if the polyfill is active\n        polyfill && oninterval();\n    }\n    function getSVGAncestor(node) {\n        for (var svg = node; \"svg\" !== svg.nodeName.toLowerCase() && (svg = svg.parentNode); ) {}\n        return svg;\n    }\n    return svg4everybody;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/svg4everybody/dist/svg4everybody.js\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}